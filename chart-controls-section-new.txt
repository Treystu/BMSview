<div className="flex justify-end items-center gap-4 mt-4">
                    {hasChartData && <button onClick={onResetView} className="text-sm text-secondary hover:underline">Reset View</button>}
                    {chartView === 'timeline' && (
                       <>
                           {/* Data Averaging Controls */}
                           <div className="flex items-center gap-3 border-r border-gray-600 pr-4">
                               <label className="flex items-center space-x-2 text-sm text-gray-300 cursor-pointer">
                                   <input 
                                       type="checkbox" 
                                       checked={averagingEnabled} 
                                       onChange={(e) => {
                                           setAveragingEnabled(e.target.checked);
                                           if (!e.target.checked) setManualBucketSize(null);
                                       }}
                                       className="form-checkbox h-4 w-4 bg-gray-700 border-gray-600 text-secondary focus:ring-secondary"
                                   />
                                   <span>Data Averaging</span>
                               </label>
                               {averagingEnabled && (
                                   <select 
                                       value={manualBucketSize || 'auto'} 
                                       onChange={(e) => setManualBucketSize(e.target.value === 'auto' ? null : e.target.value)}
                                       className="bg-gray-700 border border-gray-600 rounded-md px-2 py-1 text-sm text-white focus:ring-secondary focus:border-secondary"
                                   >
                                       <option value="auto">Auto (Zoom-based)</option>
                                       <option value="raw">No Averaging</option>
                                       <option value="5">5 Minutes</option>
                                       <option value="15">15 Minutes</option>
                                       <option value="60">1 Hour</option>
                                       <option value="240">4 Hours</option>
                                       <option value="1440">1 Day</option>
                                   </select>
                               )}
                           </div>
                           <div className="relative" ref={metricConfigRef}>
                               <button onClick={() => setIsMetricConfigOpen(o => !o)} className="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-md transition-colors">Configure Metrics</button>
                               {isMetricConfigOpen && (
                                    <div className="absolute top-full right-0 mt-2 w-96 rounded-md shadow-lg bg-gray-800 ring-1 ring-black ring-opacity-5 z-20 p-4 max-h-96 overflow-y-auto">
                                       <div className="space-y-3">
                                       {Object.entries(METRIC_GROUPS).map(([groupName, metrics]) => (
                                           <div key={groupName}>
                                               <h4 className="font-semibold text-gray-300 text-sm mb-2">{groupName}</h4>
                                               <div className="grid grid-cols-2 gap-x-4 gap-y-2">
                                                   {metrics.map(key => {
                                                       const config = metricConfig[key];
                                                       return (
                                                           <div key={key}>
                                                               <label className="flex items-center space-x-2 text-sm text-white cursor-pointer select-none">
                                                                   <input type="checkbox" checked={!!config} onChange={(e) => handleMetricConfigChange(key, e.target.checked ? { axis: 'left' } : undefined)}
                                                                       className="form-checkbox h-4 w-4 bg-gray-800 border-gray-600 text-secondary focus:ring-secondary focus:ring-offset-gray-800"
                                                                       style={{ color: METRICS[key].color }} />
                                                                   <span style={{ color: METRICS[key].color }}>{METRICS[key].label}</span>
                                                               </label>
                                                               {config && (
                                                                   <div className="text-xs flex items-center space-x-3 mt-1 pl-6">
                                                                       <label className="flex items-center space-x-1 cursor-pointer text-gray-400"><input type="radio" name={`${key}-axis`} value="left" checked={config.axis === 'left'} onChange={() => handleMetricConfigChange(key, { axis: 'left' })} className="form-radio h-3 w-3 bg-gray-900 border-gray-600 text-secondary focus:ring-secondary" /><span>Left</span></label>
                                                                       <label className="flex items-center space-x-1 cursor-pointer text-gray-400"><input type="radio" name={`${key}-axis`} value="right" checked={config.axis === 'right'} onChange={() => handleMetricConfigChange(key, { axis: 'right' })} className="form-radio h-3 w-3 bg-gray-900 border-gray-600 text-secondary focus:ring-secondary" /><span>Right</span></label>
                                                                   </div>
                                                               )}
                                                           </div>
                                                       );
                                                   })}
                                               </div>
                                           </div>
                                       ))}
                                       </div>
                                   </div>
                               )}
                           </div>
                       </>
                    )}
                    <button onClick={onGenerate} disabled={isGenerating || !selectedSystemId} className="bg-secondary hover:bg-primary text-white font-bold py-2 px-6 rounded-md transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed">
                       {isGenerating ? <><SpinnerIcon className="inline w-4 h-4 mr-2"/> Generating...</> : 'Generate Chart'}
                    </button>
               </div>
           </div>
       );
   };
   
   const SvgChart: React.FC<{